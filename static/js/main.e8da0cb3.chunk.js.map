{"version":3,"sources":["Item/Item.styles.ts","Item/Item.tsx","CartItem/CartItem.styles.ts","CartItem/CartItem.tsx","Cart/Cart.styles.ts","Cart/Cart.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["ItemWrapper","styled","div","Item","item","handleAddToCart","src","image","alt","title","description","price","toFixed","Button","onClick","CartItemWrapper","CartItem","addToCart","removeFromCart","className","amount","size","disableElevation","variant","id","CartWrapper","aside","Cart","items","cartItems","length","map","reduce","acc","AppWrapper","StyledButton","IconButton","getProducts","a","fetch","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.e8da0cb3.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const ItemWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n    border: 1px solid lightblue;\r\n    border-radius: 20px;\r\n\r\n    button {\r\n        border-radius: 0 0 20px 20px;\r\n    }\r\n\r\n    img{\r\n        max-height: 250px;\r\n        object-fit: cover;\r\n        border-radius: 20px 20px 0 0;\r\n    }\r\n\r\n    div{\r\n        font-family: Arial, Helvetica, sans-serif;\r\n        padding: 1rem;\r\n        height: 100%;\r\n    }\r\n`;","import Button from '@material-ui/core/Button';\r\n\r\n// Importing types\r\nimport { CartItemType } from '../App';\r\n\r\n// Importing style\r\nimport { ItemWrapper } from './Item.styles';\r\n\r\ntype Props = {\r\n    item: CartItemType;\r\n    handleAddToCart: (clickedItem: CartItemType) => void;\r\n}\r\n\r\nconst Item: React.FC<Props> = ({ item, handleAddToCart }) => (\r\n    <ItemWrapper>\r\n        <img src={item.image} alt={item.title} />\r\n\r\n        <div>\r\n            <h3>{item.title}</h3>\r\n            <p>{item.description}</p>\r\n            <h3>$ {item.price.toFixed(2)}</h3>\r\n        </div>\r\n        <Button onClick={() => handleAddToCart(item)}>Add to cart</Button>\r\n    </ItemWrapper>\r\n);\r\n\r\nexport default Item;","import styled from 'styled-components';\r\n\r\nexport const CartItemWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    border-bottom: 1px solid lightblue;\r\n    padding-bottom: 20px;\r\n\r\n    div {\r\n        flex: 1;\r\n    }\r\n\r\n    .information, .buttons{\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n\r\n    img{\r\n        max-width: 25%;\r\n        object-fit: cover;\r\n        margin-left: 40px;\r\n    }\r\n`;","import Button from '@material-ui/core/Button';\r\n\r\n// Types\r\nimport { CartItemType } from '../App';\r\n\r\n// Styles\r\nimport { CartItemWrapper } from './CartItem.styles';\r\n\r\ntype Props = {\r\n    item: CartItemType;\r\n    addToCart: (clickedItem: CartItemType) => void;\r\n    removeFromCart: (id: number) => void\r\n}\r\n\r\nconst CartItem: React.FC<Props> = ({ item, addToCart, removeFromCart }) => {\r\n    return <CartItemWrapper>\r\n        <div>\r\n            <h3>{item.title}</h3>\r\n            <div className=\"information\">\r\n                <p>Price: ${(item.price).toFixed(2)}</p>\r\n                <p>Total: ${(item.price * item.amount).toFixed(2)}</p>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <Button\r\n                    size=\"small\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={() => removeFromCart(item.id)}\r\n                >\r\n                    -\r\n                </Button>\r\n                <p>{item.amount}</p>\r\n                <Button\r\n                    size=\"small\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={() => addToCart(item)}\r\n                >\r\n                    +\r\n                </Button>\r\n            </div>\r\n        </div>\r\n        <img src={item.image} alt={item.title} />\r\n    </CartItemWrapper>\r\n}\r\n\r\nexport default CartItem;","import styled from 'styled-components';\r\n\r\nexport const CartWrapper = styled.aside`\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    width: 500px;\r\n    padding: 20px;\r\n`;","import CartItem from '../CartItem/CartItem';\r\n\r\n// Styles\r\nimport { CartWrapper } from './Cart.styles';\r\n\r\n// Types\r\nimport { CartItemType } from '../App';\r\n// import { CartItemWrapper } from './../CartItem/CartItem.styles';\r\n\r\ntype Props = {\r\n    cartItems: CartItemType[];\r\n    addToCart: (clickedItem: CartItemType) => void;\r\n    removeFromCart: (id: number) => void;\r\n}\r\n\r\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\r\n    const calculateTotal = (items: CartItemType[]) => {\r\n        return items.reduce((acc: number, item) => {\r\n            return acc + item.amount * item.price;\r\n        }, 0);\r\n    }\r\n\r\n    return (\r\n        <CartWrapper>\r\n            <h2>Your Shopping Cart</h2>\r\n            {cartItems.length === 0 ? <p>No Items in cart!</p> : null}\r\n            {cartItems.map((item) => {\r\n                return <CartItem\r\n                    key={item.id}\r\n                    item={item}\r\n                    addToCart={addToCart}\r\n                    removeFromCart={removeFromCart}\r\n                />\r\n            })}\r\n            <h2>Total: ${calculateTotal(cartItems).toFixed(2)}</h2>\r\n        </CartWrapper>\r\n    )\r\n}\r\n\r\nexport default Cart;","import styled from 'styled-components';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nexport const AppWrapper = styled.div`\r\n    margin: 40px;\r\n`;\r\n\r\nexport const StyledButton = styled(IconButton)`\r\n    position: fixed;\r\n    z-index: 100;\r\n    right: 20px;\r\n    top: 20px;\r\n`;","import { useState } from 'react';\nimport { useQuery } from 'react-query';\n\n// Importing external components\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Badge from '@material-ui/core/Badge';\nimport AddShoppingCardIcon from '@material-ui/icons/AddShoppingCart';\n\n// Importing internal components\nimport Item from './Item/Item';\nimport Cart from './Cart/Cart';\n\n// Importing styles\\\nimport { AppWrapper } from './App.styles';\nimport { StyledButton } from './App.styles';\nimport CartItem from './CartItem/CartItem';\n\n// Setting Types\nexport type CartItemType = {\n\tid: number,\n\tcategory: string,\n\tdescription: string,\n\timage: string,\n\tprice: number,\n\ttitle: string,\n\tamount: number\n}\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n\tawait (await fetch('https://fakestoreapi.com/products')).json();\n\nconst App = () => {\n\tconst [cartOpen, setCartOpen] = useState(false);\n\tconst [cartItems, setCartItems] = useState([] as CartItemType[]);\n\n\tconst { data, isLoading, error } = useQuery<CartItemType[]>(\n\t\t'products', getProducts\n\t);\n\n\tconst getTotalItems = (items: CartItemType[]) => {\n\t\treturn items.reduce((acc: number, item) => {\n\t\t\treturn acc + item.amount\n\t\t}, 0);\n\t};\n\n\tconst handleAddToCart = (clickedItem: CartItemType) => {\n\t\tsetCartItems(prev => {\n\t\t\tconst isItemInCart = prev.find(item => {\n\t\t\t\treturn item.id === clickedItem.id\n\t\t\t});\n\n\t\t\tif (isItemInCart) {\n\t\t\t\treturn prev.map((item) => {\n\t\t\t\t\treturn item.id === clickedItem.id\n\t\t\t\t\t\t? { ...item, amount: item.amount + 1 }\n\t\t\t\t\t\t: item\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [...prev, { ...clickedItem, amount: 1 }];\n\t\t})\n\t};\n\n\tconst handleRemoveFromCart = (id: number) => {\n\t\tsetCartItems(prev =>\n\t\t\tprev.reduce((acc, item) => {\n\t\t\t\tif (item.id === id) {\n\t\t\t\t\tif (item.amount === 1) {\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}\n\t\t\t\t\treturn [...acc, { ...item, amount: item.amount - 1 }];\n\t\t\t\t} else {\n\t\t\t\t\treturn [...acc, item];\n\t\t\t\t}\n\t\t\t}, [] as CartItemType[]),\n\t\t);\n\t};\n\n\tif (isLoading) {\n\t\treturn <LinearProgress />\n\t}\n\n\tif (error) {\n\t\treturn <h2>Something went wrong...</h2>\n\t}\n\n\treturn (\n\t\t<AppWrapper>\n\t\t\t<Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>\n\t\t\t\t<Cart\n\t\t\t\t\tcartItems={cartItems}\n\t\t\t\t\taddToCart={handleAddToCart}\n\t\t\t\t\tremoveFromCart={handleRemoveFromCart}\n\t\t\t\t/>\n\t\t\t</Drawer>\n\t\t\t<StyledButton onClick={() => setCartOpen(true)}>\n\t\t\t\t<Badge badgeContent={getTotalItems(cartItems)} color='error'>\n\t\t\t\t\t<AddShoppingCardIcon />\n\t\t\t\t</Badge>\n\t\t\t</StyledButton>\n\t\t\t<Grid container spacing={3}>\n\t\t\t\t{\n\t\t\t\t\tdata?.map(item => (\n\t\t\t\t\t\t<Grid item key={item.id} xs={12} sm={4}>\n\t\t\t\t\t\t\t<Item\n\t\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\t\thandleAddToCart={handleAddToCart}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</Grid>\n\t\t</AppWrapper>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n\t<QueryClientProvider client={client}>\n\t\t<App />\n\t</QueryClientProvider >,\n\tdocument.getElementById('root'));"],"sourceRoot":""}